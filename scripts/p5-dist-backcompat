#!/usr/bin/env perl
use 5.14.0;
use warnings;
eval 'exec /usr/local/bin/perl  -S $0 ${1+"$@"}'
  if 0;    # not running under some shell
our $VERSION = 0.01;
use Carp;
use File::Spec;
use Perl5::Dist::Backcompat;
use Getopt::Long qw( GetOptions );
use File::Temp qw( tempdir );
#use Data::Dump qw( dd pp );

##### CHECK ENVIRONMENT #####

my ($perl_workdir, $path_to_perls, $tarball_dir, $host,
    $verbose, $cat_summaries) = ('') x 6;
my @distros_requested = ();
GetOptions(
    "perl_workdir=s"    => \$perl_workdir,
    "path_to_perls=s"   => \$path_to_perls,
    "tarball_dir=s"     => \$tarball_dir,
    "verbose"           => \$verbose,
    "distro=s"          => \@distros_requested,
    "host=s"            => \$host,
    "cat_summaries"     => \$cat_summaries,
) or die "Unable to get command-line options: $!";

my @wanthyphens = ();
for my $d (@distros_requested) {
    if ($d =~ m/::/) {
        push @wanthyphens, $d;
    }
}
if (@wanthyphens) {
    warn "$_: supply distribution name in 'Some-Distro' format, not 'Some::Distro'"
        for @wanthyphens;
    die "'distro' switch in incorrect format: $!";
}

my $self = Perl5::Dist::Backcompat->new( {
    perl_workdir    => $perl_workdir,
    path_to_perls   => $path_to_perls,
    tarball_dir     => $tarball_dir,
    verbose => 1,
} );

$self->init();

$self->categorize_distros();

$self->show_makefile_pl_status();

my @distros_for_testing = $self->get_distros_for_testing(\@distros_requested);

my @perls = $self->validate_older_perls();

say "Beginning processing of requested distros;\n  this will take some time ...";

my $debugdir = tempdir();
$self->test_distros_against_older_perls($debugdir);

$self->print_distro_summaries({ cat_summaries => $cat_summaries });

unless (@distros_requested) {
    my $results_ref = $self->tally_results();

    my @lt = gmtime();
    my $YYYYMMDDHHMM = sprintf("%04d%02d%02d%02d%02d" => (
        $lt[5] + 1900,
        $lt[4] + 1,
        $lt[3],
        $lt[2],
        $lt[1],
    ));

    my $long = `git show | head -1 | cut -d ' ' -f2`;
    chomp $long;
    my $sha = substr($long,0,10);

    my $tally_message = join "|" => (
        $YYYYMMDDHHMM,
        "Core: $self->{describe}",
        "P5DBC: $sha",
        "Tested: $results_ref->[0]",
        "PASS: $results_ref->[1]",
        "FAIL: $results_ref->[2]",
        "Skipped: $results_ref->[3]",
    );
    say $tally_message;
    my $logfile = File::Spec->catfile('.', 'etc', 'tally.log');
    open my $TALLY, '>>', $logfile
        or croak "Unable to open $logfile for appending";
    say $TALLY $tally_message;
    close $TALLY or croak "Unable to close $logfile after appending";
}

say "\nFinished!" if $verbose;

=head1 NAME

p5-dist-backcompat - Will changes to F<dist/> build on older C<perl>s?

=head1 SYNOPSIS

Start in a F<git> checkout of the Perl 5 source code with a threaded build of F<perl> at a particular commit, branch or tag:

    $ cd ${PERL_CHECKOUT_DIR}
    $ git clean -dfx
    $ sh ./Configure -des -Dusedevel -Duseithreads
    $ make test_prep

From that directory or another, call this program:

    $ perl p5-dist-backcompat \
        --perl_workdir ${PERL_CHECKOUT_DIR} \
        --distro Data::Dumper \
        --distro Path::Tools \
        --cat_summaries \
        --verbose

Omit the C<--distro> switch-parameter pairs and you will test all F<dist/>
distros.

=head1 PREREQUISITES

F<perl> 5.14.0 or newer, with the following modules installed from CPAN:

=over 4

=item * F<CPAN::DistnameInfo>

=item * F<Data::Dump>

=item * F<File::Copy::Recursive::Reduced>

=back

And with the library for which this program is a front end:
F<Perl5::Dist::Backcompat> (not yet available on CPAN).

Program will use a variety of modules which are shipped with the Perl 5 core
distribution.

=head1 COMMAND-LINE SWITCHES

=over 4

=item * C<--perl_workdir>

Switch-parameter pair.  Parameter should be an absolute path to the directory
holding a F<git> checkout of the Perl 5 core distribution; user must checkout
branch, tag or commit in that directory as needed.

=item * C<--distro>

Switch-parameter pair.  Parameter should be hyphen-separated name of directory
under F</dist>, I<e.g.>, C<ExtUtils-ParseXS>, not C<ExtUtils::ParseXS>.  May
be called more than once, I<e.g.>:

    --distro Search-Dict --distro Safe --distro=Data-Dumper

=item * C<--cat_summaries>

Flag.  When set to true, will direct method C<print_distro_summaries()> to
concatenate all summaries on STDOUT.

=item * C<--verbose>

Flag.  Extra helpful output on F<STDOUT>.

=item * C<--host>

Switch-parameter pair.  Parameter should be the string returned by the system
F<hostname> call.  Defaults to C<dromedary.p5h.org>.

=item * C<--path_to_perls>

Switch-parameter pair.  Parameter should be an absolute path to the directory
holding binary executables of older F<perl>s.  Defaults to
F</media/Tux/perls-t/bin>.

=back

=cut

__END__

